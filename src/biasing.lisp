(defun find-depths (tree depth)
  (if (typep tree 'list)
    (let ((ans (list depth)))
      (dolist (sub (rest tree))
        (setf ans (append ans (find-depths sub (1+ depth)))))
      ans)
    (list depth)))

(defun find-hood (depth)
  ;(1+ depth))
  1)

(defun range (start end)
  (loop for i from start below end collect i))

(defun find-spot (likelihoods)
  (let* ((size (reduce #'+ likelihoods :key #'first))
         (goal (random size)))
    (let ((likelihood likelihoods)
          (sum (caar likelihoods)))
      (loop while (<= sum goal) do (progn (setf likelihood (rest likelihood))
                                          (incf sum (caar likelihood))))
      (cadar likelihood))))
